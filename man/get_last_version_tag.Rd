% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api-get-last-version-tag.R
\name{get_last_version_tag}
\alias{get_last_version_tag}
\title{The most recent versioned tag}
\usage{
get_last_version_tag()
}
\value{
A one-row tibble with columns \code{name}, \code{ref} and \code{commit}.
For annotated tags (as created by fledge), \code{commit} may be different
from the SHA of the commit that this tag points to.
Use \code{\link[gert:git_commit]{gert::git_log()}} to find the actual commit.
}
\description{
Returns the Git tag of the form vx.y, vx.y.z or vx.y.z.w with the latest version.
An older version of this logic is used in \code{\link[=get_last_tag]{get_last_tag()}},
which traverses the Git history but does not work with squash-merging of version bumps.
}
\examples{
# Create mock package in a temporary directory.
# Set open to TRUE if you want to play in the mock package.
with_demo_project({
  # Use functions as if inside the newly created package project.
  # (Or go and actually run code inside the newly created package project!)
  # Add a new R file.
  usethis::use_r("cool-function", open = FALSE)
  # Pretend we added useful code inside it.
  # Track the new R file with Git.
  gert::git_add("R/cool-function.R")
  gert::git_commit("- Add cool function.")
  # Switch to branch for bumping version.
  gert::git_branch_create("fledge")
  # Bump version with fledge.
  fledge::bump_version(check_default_branch = FALSE)
  fledge::finalize_version()

  # Merge the version bump branch into main.
  gert::git_branch_checkout("main")
  gert::git_merge("fledge", squash = TRUE)

  print(get_top_level_commits(since = NULL))

  # get_last_tag() doesn't work in this scenario
  print(fledge::get_last_tag())

  # get_last_version_tag() is better
  print(fledge::get_last_version_tag())
})
}
